#!/usr/bin/env python3
"""
Generated MCP Server for Test

This file was automatically generated by swagger-mcp-server
from the Swagger specification: /var/folders/zn/q3v0th8s0918bl7_p1xmd2l00000gn/T/tmpaqfex66i.json

Generated on: 2025-09-28T02:30:28.599601
API Version: 1.0
"""

import asyncio
import os
import sys
from pathlib import Path

# Add the swagger_mcp_server package to Python path
sys.path.insert(0, str(Path(__file__).parent))

try:
    from swagger_mcp_server.server.mcp_server import MCPServer
    from swagger_mcp_server.storage.database import Database
    from swagger_mcp_server.search.search_engine import SearchEngine
    from swagger_mcp_server.search.index_manager import SearchIndexManager
    from swagger_mcp_server.config.settings import Settings
except ImportError as e:
    print(f"Error importing required modules: {e}")
    print("Please ensure swagger-mcp-server is properly installed:")
    print("  pip install -r requirements.txt")
    sys.exit(1)

import structlog

# Configure logging
structlog.configure(
    processors=[
        structlog.dev.ConsoleRenderer(colors=True)
    ],
    wrapper_class=structlog.make_filtering_bound_logger(20),  # INFO level
    logger_factory=structlog.WriteLoggerFactory(),
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)


class TestMCPServer:
    """Generated MCP Server for Test."""

    def __init__(self):
        self.config = self._load_config()
        self.database = None
        self.search_engine = None
        self.mcp_server = None

    def _load_config(self) -> Dict[str, Any]:
        """Load server configuration."""
        base_config = {
            "api_title": "Test",
            "api_version": "1.0",
            "server_name": "test",
            "host": "localhost",
            "port": 8080,
            "database_path": "./mcp-server-tmpaqfex66i/data/mcp_server.db",
            "search_index_path": "./mcp-server-tmpaqfex66i/data/search_index",
        }

        # Load from config file if exists
        config_file = Path(__file__).parent / "config" / "server.yaml"
        if config_file.exists():
            try:
                import yaml
                with open(config_file) as f:
                    file_config = yaml.safe_load(f) or {}
                base_config.update(file_config)
            except ImportError:
                logger.warning("PyYAML not installed, using default configuration")
            except Exception as e:
                logger.warning("Failed to load config file", error=str(e))

        # Override with environment variables
        env_overrides = {
            "host": os.getenv("MCP_HOST"),
            "port": os.getenv("MCP_PORT"),
            "database_path": os.getenv("MCP_DATABASE_PATH"),
        }

        for key, value in env_overrides.items():
            if value is not None:
                if key == "port":
                    try:
                        base_config[key] = int(value)
                    except ValueError:
                        logger.warning("Invalid port value in environment", port=value)
                else:
                    base_config[key] = value

        return base_config

    async def initialize(self):
        """Initialize database and search components."""
        try:
            logger.info("Initializing MCP server components")

            # Initialize database
            database_path = self.config["database_path"]
            if not os.path.isabs(database_path):
                database_path = os.path.join(os.path.dirname(__file__), database_path)

            self.database = Database(database_path)
            await self.database.connect()
            logger.info("Database connected", path=database_path)

            # Initialize search engine
            search_index_path = self.config["search_index_path"]
            if not os.path.isabs(search_index_path):
                search_index_path = os.path.join(os.path.dirname(__file__), search_index_path)

            index_manager = SearchIndexManager(search_index_path)
            self.search_engine = SearchEngine(index_manager, {})
            logger.info("Search engine initialized", path=search_index_path)

            # Initialize MCP server
            settings = Settings()
            self.mcp_server = MCPServer(
                database=self.database,
                search_engine=self.search_engine,
                settings=settings
            )
            logger.info("MCP server initialized")

        except Exception as e:
            logger.error("Failed to initialize server components", error=str(e))
            raise

    async def start(self):
        """Start the MCP server."""
        try:
            await self.initialize()

            logger.info("Starting MCP server for {}".format(self.config["api_title"]))
            logger.info("Server configuration:")
            logger.info("  API: {} v{}".format(
                self.config["api_title"],
                self.config["api_version"]
            ))
            logger.info("  Host: {}".format(self.config["host"]))
            logger.info("  Port: {}".format(self.config["port"]))
            logger.info("  Database: {}".format(self.config["database_path"]))

            print("\nüöÄ MCP Server is starting...")
            print(f"üìä API: {self.config['api_title']} v{self.config['api_version']}")
            print(f"üåê Server URL: http://{self.config['host']}:{self.config['port']}")
            print(f"üìö Available MCP methods: searchEndpoints, getSchema, getExample")
            print(f"ü§ñ AI agents can now connect and query API documentation")
            print("\nüìã To stop the server, press Ctrl+C")
            print("üìñ For usage examples, see README.md")

            # Start the MCP server
            await self.mcp_server.start(
                host=self.config["host"],
                port=self.config["port"]
            )

        except KeyboardInterrupt:
            logger.info("Shutting down server")
            print("\nüëã Server shutting down...")
        except Exception as e:
            logger.error("Server error", error=str(e))
            print(f"\n‚ùå Server error: {e}")
            raise
        finally:
            await self.cleanup()

    async def cleanup(self):
        """Clean up resources."""
        try:
            if self.mcp_server:
                await self.mcp_server.stop()
            if self.database:
                await self.database.close()
        except Exception as e:
            logger.error("Error during cleanup", error=str(e))


async def main():
    """Main entry point."""
    server = TestMCPServer()
    await server.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
    except Exception as e:
        print(f"\n‚ùå Fatal error: {e}")
        sys.exit(1)
