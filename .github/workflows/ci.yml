name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with dev

    - name: Install project
      run: poetry install --no-interaction

    - name: Run linting
      run: |
        poetry run black --check src/
        poetry run isort --check-only src/
        poetry run flake8 src/

    - name: Run type checking
      run: poetry run mypy src/swagger_mcp_server/

    - name: Run tests
      run: |
        poetry run pytest src/tests/unit/ --cov=swagger_mcp_server --cov-report=xml --cov-report=term-missing \
          --ignore=src/tests/unit/test_search/test_endpoint_indexing.py \
          --ignore=src/tests/unit/test_search/test_index_manager.py \
          --ignore=src/tests/unit/test_search/test_index_schema.py \
          --ignore=src/tests/unit/test_search/test_query_processor.py \
          --ignore=src/tests/unit/test_search/test_relevance.py \
          --ignore=src/tests/unit/test_search/test_result_processor.py \
          --ignore=src/tests/unit/test_search/test_schema_search_integration.py \
          --ignore=src/tests/unit/test_search/test_search_analytics.py \
          --ignore=src/tests/unit/test_search/test_search_engine.py \
          --maxfail=5 -x --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run security checks
      run: |
        poetry run pip install safety bandit
        poetry run safety check
        poetry run bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

# Note: Integration and performance tests are excluded from CI for speed
# They can be run locally with: poetry run pytest src/tests/integration/ src/tests/performance/